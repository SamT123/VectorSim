
import simuPOP as sim
from simuPOP.sampling import drawRandomSample
from itertools import combinations
import numpy as np





Ne = 1300
S = 100
n_loci = 1000
gens = 3
repeats = 50
initial_frequencies = [0.5,0.5]
import matplotlib.pyplot as plt


##########################
def fc_variant(freqs_init, freqs_end):
    xi_1, yi_1 = freqs_init[0], freqs_end[0]
    xi_2, yi_2 = freqs_init[1], freqs_end[1]

    return (1/2) * (xi_1-yi_1)**2 / ( (xi_1 + yi_1)/2 - xi_1*yi_1)  + (1/2) * (xi_2-yi_2)**2 / ( (xi_2 + yi_2)/2 - xi_2*yi_2)
##########################

Ne_ests = []
FCs = []
for r in range(repeats):
    print(r+1)

    popNe = sim.Population(size=[Ne], ploidy=2, loci=[1]*n_loci)
    popS  = sim.Population(size=[S], ploidy=2, loci=[1]*n_loci)
    sim.initGenotype(popNe, freq = initial_frequencies)
    sim.initGenotype(popS , freq = initial_frequencies)

    sim.stat(popS, alleleFreq = range(0,n_loci), vars = ['alleleFreq'])
    initial_allele_freqs = popS.vars()['alleleFreq']


    popNe.evolve( 
        initOps = [sim.InitSex()],
        matingScheme = sim.RandomMating(),
        gen = gens
    )

    sample_pop = drawRandomSample(popNe, sizes = S)
    sim.stat(sample_pop, alleleFreq = range(0,n_loci), vars = ['alleleFreq'])


    meanFC_repeat = 0
    countFC = 0


    allele_freqs = sample_pop.vars()['alleleFreq']

    for k in allele_freqs.keys() :
        inits = list(initial_allele_freqs[k].values())
        ends = list(allele_freqs[k].values())

        if len(inits) + len(ends) == 4:
            meanFC_repeat += fc_variant(list(initial_allele_freqs[k].values()), list(allele_freqs[k].values()))
            countFC += 1

    if countFC != 0:
        meanFC_repeat = meanFC_repeat / countFC

        Ne_repeat = gens / (2*(meanFC_repeat - 1/(2*S) - 1/(2*S) ))

        Ne_ests.append(Ne_repeat)
        FCs.append(meanFC_repeat)




print('\nNe estimate from mean Fc')
FCmean_Ne = gens / (2*(np.mean(FCs) - 1/(2*S) - 1/(2*S) ))
print( FCmean_Ne )
print('\n\n')


plt.hist(Ne_ests, range = (-Ne,3*Ne), bins = 300)
plt.plot([Ne,Ne], [0,20])
plt.plot([FCmean_Ne,FCmean_Ne], [0,20], 'g--')

plt.xlim(-Ne,3*Ne)
plt.show()